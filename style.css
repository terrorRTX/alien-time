@import url("./BigPixelShadowedDemo-dXog.ttf");
*{
    padding :0;
    margin : 0;
    box-sizing: border-box;
}
@font-face {
    font-family: BigPixel;
    src: url("../alien-time/BigPixelShadowedDemo-dXog.ttf") format('truetype');
    font-weight: bold;
    font-style: normal;
}
body {
//background: url("./3090-wallpaper-1920x1080-r1.png")no-repeat center center fixed;
   background-color:black;
  -webkit-background-size: cover;
  -moz-background-size: cover;
  -o-background-size: cover;
  background-size: cover;
  opacity: 0.1,
    filter:alpha(opacity=10);
}
.main {
    background-color: rgba(18,18,18, 0.8);
    width: 800px;
    margin: 100px auto;
    height: 175px;
position: relative;
padding: 30px;
border-radius: 5px;
}
.badge{
    background-color: rgba(242,150,108, 0.7);
    color: white;
    text-align: center;
    padding: 5px 10px;
    font-family: sans-serif;
    font-weight: bold;
    width: 256px;
top: 15px;
left:40%;
    position: relative;
}
.clock{
    background-color: rgba(235,235,235, 0.0);
    text-color: rgba(230,0,0,1.0);
    text-align: center;
    font-size:60px;
    height: 100%;
    padding-top: 35px;
    font-family: BigPixel;
    border-radius: 10px;
    
    -webkit-animation: flicker 1s infinite;
    
}
.clock2{
    background-color: rgba(235,235,235, 0.0);
    text-color: rgba(230,0,0,1.0);
    text-align: center;
    font-size:20px;
    height: 100%;
    padding-top: 35px;
    font-family: BigPixel;
    border-radius: 10px;
    
    -webkit-animation: rainbow 5s infinite;
}

@-webkit-keyframes rainbow{
0%{color: hsla(0,100%,0%,1.0);}	
10%{color: hsla(36,100%,50%,1.0);}	
20%{color: hsla(72,100%,50%,1.0);}
30%{color: hsla(108,100%,50%,1.0);}
40%{color: hsla(144,100%,50%,1.0);}
50%{color: hsla(180,100%,50%,1.0);}
60%{color: hsla(216,100%,50%,1.0);}
70%{color: hsla(252,100%,50%,1.0);}
80%{color: hsla(288,100%,50%,1.0);}
90%{color: hsla(312,100%,50%,1.0);}
100%{color: hsla(0,100%,50%,1.0);}
}

@-webkit-keyframes flicker{
0%{color: hsla(0,100%,0%,0.0);}	
10%{color: hsla(0,100%,50%,0.2);}	
20%{color: hsla(0,100%,50%,1.0);}
30%{color: hsla(0,100%,50%,1.0);}
40%{color: hsla(0,100%,50%,1.0);}
50%{color: hsla(0,100%,50%,1.0);}
60%{color: hsla(0,100%,50%,0.0);}
70%{color: hsla(0,100%,50%,1.0);}
80%{color: hsla(0,100%,50%,1.0);}
90%{color: hsla(0,100%,50%,0.3);}
100%{color: hsla(0,100%,50%,1.0);}
}


.sub {
	color: rgb(100,220,220);
	letter-spacing: 1em;
}

// Here's the meat and potatoes.

/* Our mixin positions a copy of our text
directly on our existing text, while
also setting content to the appropriate
text set in the data-text attribute. */
@mixin glitchCopy { 
		content: attr(data-text);
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
}

.glitch {
	position: relative;
	color: white;
	font-size: 4em;
	letter-spacing: .5em;
	/* Animation provies a slight random skew. Check bottom of doc
	for more information on how to random skew. */
	animation: glitch-skew 1s infinite linear alternate-reverse;
	
	// Creates a copy before our text. 
	&::before{
		// Duplicates our text with the mixin.
		@include glitchCopy;
		// Scoots text slightly to the left for the color offset.
		left: 2px;
		// Creates the color 'shadow' that happens on the glitch.
		text-shadow: -2px 0 #ff00c1;
		/* Creates an initial clip for our glitch. This works in
		a typical top,right,bottom,left fashion and creates a mask
		to only show a certain part of the glitch at a time. */
		clip: rect(44px, 450px, 56px, 0);
		/* Runs our glitch-anim defined below to run in a 5s loop, infinitely,
		with an alternating animation to keep things fresh. */
		animation: glitch-anim 5s infinite linear alternate-reverse;
	}
	
	// Creates a copy after our text. Note comments from ::before.
	&::after {
		@include glitchCopy;
		left: -2px;
		text-shadow: -2px 0 #00fff9, 2px 2px #ff00c1;
		animation: glitch-anim2 1s infinite linear alternate-reverse;
	}
}

/* Creates an animation with 20 steaps. For each step, it calculates 
a percentage for the specific step. It then generates a random clip
box to be used for the random glitch effect. Also adds a very subtle
skew to change the 'thickness' of the glitch.*/
@keyframes glitch-anim {
  $steps: 20;
  @for $i from 0 through $steps {
    #{percentage($i*(1/$steps))} {
      clip: rect(random(100)+px, 9999px, random(100)+px, 0);
			transform: skew((random(100) / 100) + deg);
    }
  }
}

// Same deal, just duplicated for ultra randomness.
@keyframes glitch-anim2 {
  $steps: 20;
  @for $i from 0 through $steps {
    #{percentage($i*(1/$steps))} {
      clip: rect(random(100)+px, 9999px, random(100)+px, 0);
			transform: skew((random(100) / 100) + deg);
    }
  }
}

// Does the same deal as before, but now only skews. Used for main text.
@keyframes glitch-skew {
  $steps: 10;
  @for $i from 0 through $steps {
    #{percentage($i*(1/$steps))} {
      transform: skew((random(10) - 5) + deg);
    }
  }
}
